<?xml version="1.0"?>
<configuration>

  <appSettings>
    <!-- ### SPA settings ### -->
    <!-- if present override the BaseValue (in order to redirect in case of proxy) -->
    <add key="ForceBaseUrl" value="" />

    <!-- it also must be abilitated on the frontend side (common.js settings) -->
    <add key="IsRegistrationEnabled" value="true" />

    <!-- if true, users cannot login if they have not clicked the emailed link first -->
    <!-- if true does the login after the registration -->
    <add key="IsEmailConfirmedRequired" value="false"/>

    <!-- if true it will Trace Exception.ToString(), if false Exception.Message -->
    <add key="ShouldTraceFullExceptions" value="false" />
    <!-- ### End SPA settings ### -->
  </appSettings>

  <system.web>
    <compilation debug="true" targetFramework="4.6.2" />
    <httpRuntime targetFramework="4.6.2" />

    <!-- Off to show error details even in production, RemoteOnly is the one that should be used-->
    <customErrors mode="On" defaultRedirect="/#/errors/generic">
      <error statusCode="500" redirect="/#/errors/internal" />
      <error statusCode="404" redirect="/#/errors/notfound" />
    </customErrors>

    <authentication mode="None" />
    <!--
    <authentication mode="Forms">
      <forms loginUrl="~/#/account/login" timeout="2880" protection="All" defaultUrl="~/#" slidingExpiration="true" />
    </authentication>
    -->
  </system.web>

  <system.net>
    <mailSettings>
      <smtp from="noreply@gmail.com" deliveryMethod="Network">
        <network host="smtp.gmail.com" port="587" enableSsl="true" defaultCredentials="false" userName="noreply@gmail.com" password="password" />
      </smtp>
    </mailSettings>
    <defaultProxy enabled="true" />
  </system.net>

  <system.webServer>

    <rewrite>
      <rules>
        <clear />
        <!--Redirect to https-->
        <!--
        <rule name="Redirect to https" stopProcessing="true">
          <match url="(.*)" />
          <conditions>
            <add input="{HTTPS}" pattern="off" ignoreCase="true" />
          </conditions>
          <action type="Redirect" url="https://{HTTP_HOST}{REQUEST_URI}" redirectType="Permanent" appendQueryString="false" />
        </rule>
        -->

        <!--redirect if path doesn't contains... -->
        <!--
        <rule name="Redirect if do not contains" stopProcessing="true">
          <match url="^((?!Rankings|End|Errors|Content|Scripts|favicon|bootstrap|jquery|site|modernizr|SOURCESANSPRO).)*$" />

          <action type="Redirect" url="https://{HTTP_HOST}/App/End.html" redirectType="Temporary" appendQueryString="false" />
        </rule>
        -->

        <!--It always must be the last rule!-->
        <rule name="Rewrite SPA" stopProcessing="true">
          <match url="^$" />
          <action type="Rewrite" url="App/Index.html" />
        </rule>
      </rules>
    </rewrite>
    
    
    <!--Access-Control-Allow-Origin: if someone goes to the http site and we redirect him to the https, the browser could not permit it -->
    <!--
    <httpProtocol>
      <customHeaders>
        <add name="Access-Control-Allow-Origin" value="https://www.website.com" />
      </customHeaders>
    </httpProtocol>
    -->

    <staticContent>
      <remove fileExtension=".otf" />
      <mimeMap fileExtension=".otf" mimeType="font/otf" />
      <remove fileExtension=".woff" />
      <mimeMap fileExtension=".woff" mimeType="application/x-font-woff" />
      <remove fileExtension=".woff2" />
      <mimeMap fileExtension=".woff2" mimeType="application/x-font-woff2" />
    </staticContent>

  </system.webServer>

  <!-- Trace in Application Insights-->
  <!--
  <system.diagnostics>
    <trace autoflush="true" indentsize="0">
      <listeners>
        <add name="myAppInsightsListener" type="Microsoft.ApplicationInsights.TraceListener.ApplicationInsightsTraceListener, Microsoft.ApplicationInsights.TraceListener" />
      </listeners>
    </trace>
  </system.diagnostics>
  -->

  <!-- Trace in File Log-->
  <!--
  <system.diagnostics>
    <trace autoflush="true" indentsize="4">
      <listeners>
        <add name="myListener"
          type="System.Diagnostics.TextWriterTraceListener"
          initializeData="TextWriterOutput.log" >
          <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning"/>
        </add>
        <remove name="Default" />
      </listeners>
    </trace>
  </system.diagnostics>
  -->

</configuration>
