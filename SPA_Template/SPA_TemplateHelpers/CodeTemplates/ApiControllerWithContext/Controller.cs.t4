<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "api/" + ControllerRootName;
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.Description;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
	[RoutePrefix("<#= routePrefix #>")]
    public class <#= ControllerName #> : ApiController
    {
		//todo: derive from BaseController, remove this property, remove Dispose
        protected readonly <#= ContextTypeName #> db = new <#= ContextTypeName #>();

		[HttpGet]
        [Route("Get<#= ModelTypeName #>")]
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

			//todo: tomodel e ritornare il modello

            return Ok(<#= ModelVariable #>);
        }

        [HttpGet]
        [Route("Get<#= ModelTypeName #>")]
        [ResponseType(typeof(List<<#= ModelTypeName #>>))]
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>()
        {
            var <#= ModelVariable #> = await db.<#= entitySetName #>.ToListAsync();

			//todo: tomodel e ritornare i modelli

            return Ok(<#= ModelVariable #>);
        }

		[HttpPost]
        [Route("Update<#= ModelTypeName #>")]
        public IHttpActionResult Update<#= ModelTypeName #>(Get<#= ModelTypeName #>Model Model)
        {
            if (Model == null || !ModelState.IsValid)
                return BadRequest(ModelState);

            var <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

			//todo: update logic

            return Ok();
        }

		[HttpPost]
        [Route("Add<#= ModelTypeName #>")]
        public IHttpActionResult Add<#= ModelTypeName #>(Add<#= ModelTypeName #>Model Model)
        {
            if (Model == null || !ModelState.IsValid)
                return BadRequest(ModelState);

			//todo: add logic

            return Ok();
        }

		[HttpPost]
        [Route("Delete<#= ModelTypeName #>")]
        public IHttpActionResult Delete<#= ModelTypeName #>(Delete<#= ModelTypeName #>Model Model)
        {
            if (Model == null || !ModelState.IsValid)
                return BadRequest(ModelState);

			var <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

			//todo: delete logic

            return Ok();
        }



        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}